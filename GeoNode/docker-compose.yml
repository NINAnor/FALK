version: '3'

services:

  # Our custom django application. It includes Geonode.
  django:
    &default-common-django
    image: registry.gitlab.com/nina-data/geonode/kubernetes_falk_custom/django
    build:
      context: ../../
      dockerfile: scripts/spcgeonode/django/Dockerfile
    environment:
      # editable in .env
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - GEOSERVER_ADMIN_USER=${ADMIN_USERNAME}
      - GEOSERVER_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - REGISTRATION_OPEN=${REGISTRATION_OPEN}
      - TIME_ZONE=${TIME_ZONE}
      - ALLOWED_HOSTS=['nginx','127.0.0.1','localhost','$HTTPS_HOST','$HTTP_HOST']
      - SECRET_KEY=${SECRET_KEY}
      # data
      ## -- comment to disable postgis ingestion of uploaded shapefiles
      - DEFAULT_BACKEND_UPLOADER=geonode.importer
      - DEFAULT_BACKEND_DATASTORE=datastore
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}

      # hardcoded
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=geonode.settings
      - BROKER_URL=amqp://rabbitmq:5672
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/uploaded/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - ASYNC_SIGNALS=True
      - SESSION_EXPIRED_CONTROL_ENABLED=False
      # TODO : we should probably remove this and set Celery to use JSON serialization instead of pickle
      - C_FORCE_ROOT=True
      # We get an exception after migrations on startup (it seems the monitoring app tries to resolve the geoserver domain name after it's migration, which can happen before oauth migrations on which geoserver startup depends...)
      - MONITORING_ENABLED=False
      # Automated tests hang for unknown reasons using 'mapstore' by default
      - GEONODE_CLIENT_LAYER_PREVIEW_LIBRARY=geoext
    volumes:
      - static:/spcgeonode-static/
      - media:/spcgeonode-media/
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8001/"
      interval: 60s
      timeout: 10s
      retries: 1
    entrypoint: "/spcgeonode/scripts/spcgeonode/django/docker-entrypoint.sh"
    command: "uwsgi --chdir=/spcgeonode --module=geonode.wsgi --socket=:8000 --http=127.0.0.1:8001 --processes=5 --buffer-size=8192"

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    entrypoint: ''
    command: 'celery worker --app=geonode.celery_app:app -l info -E'

  # Celery beat that triggers scheduled tasks
  celerybeat:
    << : *default-common-django
    entrypoint: ''
    command: 'celery beat --app=geonode.celery_app:app --pidfile="/celerybeat.pid" -l info'

  # Celery camera that monitors celery tasks and populate the djcelery django admin interface
  celerycam:
    << : *default-common-django
    entrypoint: ''
    command: 'celery events --app=geonode.celery_app:app --pidfile="/celeryev.pid" --camera=django_celery_monitor.camera.Camera --frequency=2.0 -l info'

  # Nginx is serving django static and media files and proxies to django and geonode
  nginx:
    image: registry.gitlab.com/nina-data/geonode/kubernetes_falk_custom/nginx
    build: ./nginx/
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - static:/spcgeonode-static/
      - media:/spcgeonode-media/
    restart: on-failure

  # Geoserver backend
  geoserver:
    image: registry.gitlab.com/nina-data/geonode/kubernetes_falk_custom/geoserver
    build: ./geoserver/
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
      interval: 60s
      timeout: 10s
      retries: 1
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    volumes:
      - geodatadir:/spcgeonode-geodatadir/
    restart: on-failure

  # PostGIS database.
  postgres:
    # use geonode official postgis 10 image
    image: geonode/postgis:10
    build: ./postgis/
    environment:
      # database info, ${variables} are read from .env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GEONODE_DATABASE=${GEONODE_DATABASE}
      - GEONODE_DATABASE_PASSWORD=${GEONODE_DATABASE_PASSWORD}
      - GEONODE_GEODATABASE=${GEONODE_GEODATABASE}
      - GEONODE_GEODATABASE_PASSWORD=${GEONODE_GEODATABASE_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE}:${GEONODE_DATABASE_PASSWORD}@postgres:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE}:${GEONODE_GEODATABASE_PASSWORD}@postgres:5432/${GEONODE_GEODATABASE}
    volumes:
      - database:/var/lib/postgresql/data/
    restart: on-failure
    # uncomment to enable remote connections to postgres
    #ports:
    #  - "5432:5432"

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

volumes:
  static:
  media:
  database:
  geodatadir:
  rabbitmq:
